-------------------------------------bisection---------------------

#include<stdio.h>
#include<math.h>
#define f(x) cos(x) - x * exp(x)

int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1;

	 /* Inputs */
	 up:
	 printf("\nEnter two initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 /* Calculating Functional Value */
	 f0 = f(x0);
	 f1 = f(x1);
	 /* Checking whether given guesses brackets the root or not. */
	 if( f0 * f1 > 0.0)
	 {
		  printf("Incorrect Initial Guesses.\n");
		  goto up;
	 }
   /* Implementing Bisection Method */
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
	 do
	 {
		  x2 = (x0 + x1)/2;
		  f2 = f(x2);
		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step, x0, x1, x2, f2);
		
		  if( f0 * f2 < 0)
		  {
			   x1 = x2;
			   f1 = f2;
		  }
		  else
		  {
			   x0 = x2;
			   f0 = f2;
		  }
		  step = step + 1;
	 }while(fabs(f2)>e);
	 printf("\nRoot is: %f", x2);
    return 0;
}


-------------------------------------secant------------------------

#include<stdio.h>
#include<math.h>
#include<stdlib.h>

#define f(x) x*x*x - 2*x - 5

int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1, N;

	 /* Inputs */
	 printf("\nEnter initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 printf("Enter maximum iteration:\n");
	 scanf("%d", &N);
	
	 /* Implementing Secant Method */
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
	 do
	 {
		  f0 = f(x0);
		  f1 = f(x1);
		  if(f0 == f1)
		  {
			   printf("Mathematical Error.");
			   exit(0);
		  }
		  
		  x2 = x1 - (x1 - x0) * f1/(f1-f0);
		  f2 = f(x2);
		  
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step,x0,x1,x2, f2);
		  
		  x0 = x1;
		  f0 = f1;
		  x1 = x2;
		  f1 = f2;
		  
		  step = step + 1;
		  
		  if(step > N)
		  {
			   printf("Not Convergent.");
			   exit(0);
		  }
	 }while(fabs(f2)>e);
	
	 printf("\nRoot is: %f", x2);
return 0 ;
}
-------------------------------------lagrange----------------------

#include<stdio.h>
int main()
{
	 float x[100], y[100], xp, yp=0, p;
	 int i,j,n;
	 /* Input Section */
	 printf("Enter number of data: ");
	 scanf("%d", &n);
	 printf("Enter data:\n");
	 for(i=1;i<=n;i++)
	 {
		  printf("x[%d] = ", i);
		  scanf("%f", &x[i]);
		  printf("y[%d] = ", i);
		  scanf("%f", &y[i]);
	 }
	 printf("Enter interpolation point: ");
	 scanf("%f", &xp);
	 /* Implementing Lagrange Interpolation */
	 for(i=1;i<=n;i++)
	 {
		  p=1;
		  for(j=1;j<=n;j++)
		  {
			   if(i!=j)
			   {
			    	p = p* (xp - x[j])/(x[i] - x[j]);
			   }
		  }
		  yp = yp + p * y[i];
	 }
	 printf("Interpolated value at %.3f is %.3f.", xp, yp);
return 0;
}



-------------------------------------Newton dividend---------------

#include<stdio.h>


int main()
{
    int x[10], y[10], p[10];
    int k,f,n,i,j=1,f1=1,f2=0;
    printf("\nEnter the number of observations:\n");
    scanf("%d", &n);

    printf("\nEnter the different values of x:\n");
    for (i=1;i<=n;i++)
        scanf("%d", &x[i]);

    printf("\nThe corresponding values of y are:\n");
    for (i=1;i<=n;i++)
        scanf("%d", &y[i]);

    f=y[1];
    printf("\nEnter the value of 'k' in f(k) you want to evaluate:\n");
    scanf("%d", &k);

    do
    {
        for (i=1;i<=n-1;i++)
        {
            p[i] = ((y[i+1]-y[i])/(x[i+j]-x[i]));
            y[i]=p[i];
        }
        f1=1;
        for(i=1;i<=j;i++)
            {
                f1*=(k-x[i]);
            }
        f2+=(y[1]*f1);
        n--;
        j++;
    }

    while(n!=1);
    f+=f2;
    printf("\nf(%d) = %d", k , f);
    return 0;
}

-------------------------------------Newton Rapson-----------------

#include<stdio.h>

#include<math.h>
#include<stdlib.h>

#define    f(x)    3*x - cos(x) -1

#define   g(x)   3 + sin(x)

int main()
{
	 float x0, x1, f0, f1, g0, e;
	 int step = 1, N;

     /* Inputs */
	 printf("\nEnter initial guess:\n");
	 scanf("%f", &x0);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 printf("Enter maximum iteration:\n");
	 scanf("%d", &N);
	 /* Implementing Newton Raphson Method */
	 printf("\nStep\t\tx0\t\tf(x0)\t\tx1\t\tf(x1)\n");
	 do
	 {
		  g0 = g(x0);
		  f0 = f(x0);
		  if(g0 == 0.0)
		  {
			   printf("Mathematical Error.");
			   exit(0);
		  }

		
		  x1 = x0 - f0/g0;

		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step,x0,f0,x1,f1);
		  x0 = x1;
		  
		  step = step+1;
		
		  if(step > N)
		  {
			   printf("Not Convergent.");
			   exit(0);
		  }
		  
		  f1 = f(x1);
		  
	 }while(fabs(f1)>e);
	
	 printf("\nRoot is: %f", x1);
	 return 0;
}

------------------------------Newton forward table and approximation------------------
#include <stdio.h>
#include <math.h>

int fact(int);

void main() {
    float arr[10][11], x, h, p, y, px = 1;
    int i, j, n, ch = 30;

    printf("\nEnter the number of data:");
    scanf("%d", &n);

    printf("\nEnter the data");
    for (i = 0; i < n; i++) {
        printf("X%d=", i + 1);
        scanf("%f", &arr[i][0]);
        printf("Y%d=", i + 1);
        scanf("%f", &arr[i][1]);
    }

    // Forming difference table.
    for (j = 2; j <= n; j++)
        for (i = 0; i < n - 1; i++)
            arr[i][j] = arr[i + 1][j - 1] - arr[i][j - 1];

    // Printing table.
    printf("\nDifference table is:-");
    printf("\n\tx\tY");
    for (i = 0; i <= n - 2; i++)
        printf("\t%c^%dY", ch, i + 1);
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n + 1 - i; j++) {
            printf("\t%.4f", arr[i][j]);
        }
    }

    // Take the value of x for f(x).
    printf("\nEnter the value x for function f(x):");
    scanf("%f", &x);

    // Calculate the value of f(x) for x.
    h = arr[1][0] - arr[0][0];
    p = (x - arr[0][0]) / h;
    y = arr[0][1];

    for (i = 1; i < n; i++) {
        px = px * (p - (i - 1));
        y = y + (arr[0][i + 1] * px) / fact(i);
    }

    printf("\nThe value of function at x=%f is %f", x, y);
}

int fact(int n) {
    int i, f = 1;
    for (i = 1; i <= n; i++)
        f = f * i;
    return f;
}



-----------------------------Newton backwards table and approximation----------

#include <stdio.h>
#include <math.h>

int fact(int);

void main() {
    float arr[10][11], x, h, p, y, px = 1;
    int i, j, n, ch = 30;

    printf("\nEnter the number of data:");
    scanf("%d", &n);

    printf("\nEnter the data");
    for (i = 0; i < n; i++) {
        printf("X%d=", i + 1);
        scanf("%f", &arr[i][0]);
        printf("Y%d=", i + 1);
        scanf("%f", &arr[i][1]);
    }

    // Forming difference table (backward differences).
    for (j = 2; j <= n; j++)
        for (i = n - 1; i >= j - 1; i--)
            arr[i][j] = arr[i][j - 1] - arr[i - 1][j - 1];

    // Printing table.
    printf("\nDifference table is:-");
    printf("\n\tx\tY");
    for (i = 0; i <= n - 2; i++)
        printf("\t%c^%dY", ch, i + 1);
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n + 1 - i; j++) {
            printf("\t%.4f", arr[i][j]);
        }
    }

    // Take the value of x for f(x).
    printf("\nEnter the value x for function f(x):");
    scanf("%f", &x);

    // Calculate the value of f(x) for x.
    h = arr[1][0] - arr[0][0];
    p = (x - arr[n - 1][0]) / h;
    y = arr[n - 1][1];

    for (i = 1; i < n; i++) {
        px = px * (p + (i - 1));
        y = y + (arr[n - 1][i + 1] * px) / fact(i);
    }

    printf("\nThe value of function at x=%f is %f", x, y);
}

int fact(int n) {
    int i, f = 1;
    for (i = 1; i <= n; i++)
        f = f * i;
    return f;
}


-----------------------------least sqare method -------------------------------
#include<stdio.h>
#define S 50

int main()
{
 int n, i;
 float x[S], y[S], sumX=0, sumX2=0, sumY=0, sumXY=0, a, b;

 /* Input */
 printf("How many data points?\n");
 scanf("%d", &n);
 printf("Enter data:\n");
 for(i=1;i<=n;i++)
 {
  printf("x[%d]=",i);
  scanf("%f", &x[i]);
  printf("y[%d]=",i);
  scanf("%f", &y[i]);
 }
 /* Calculating Required Sum */
 for(i=1;i<=n;i++)
 {
  sumX = sumX + x[i];
  sumX2 = sumX2 + x[i]*x[i];
  sumY = sumY + y[i];
  sumXY = sumXY + x[i]*y[i];
 }
 /* Calculating a and b */
 b = (n*sumXY-sumX*sumY)/(n*sumX2-sumX*sumX);
 a = (sumY - b*sumX)/n;
 /* Displaying value of a and b */
 printf("Values are: a=%0.2f and b = %0.2f",a,b);
 printf("\nEquation of best fit is: y = %0.2f + %0.2fx",a,b);

 return(0);
}


------------------------------------------trapezoidal rule n=5------------------------
#include<stdio.h>

#include<math.h>

/* Define function here */
#define f(x) 1/(1+pow(x,2))

int main()
{
 float lower, upper, integration=0.0, stepSize, k;
 int i, subInterval;
 
 /* Input */
 printf("Enter lower limit of integration: ");
 scanf("%f", &lower);
 printf("Enter upper limit of integration: ");
 scanf("%f", &upper);
 printf("Enter number of sub intervals: ");
 scanf("%d", &subInterval);

 /* Calculation */
 /* Finding step size */
 stepSize = (upper - lower)/subInterval;

 /* Finding Integration Value */
 integration = f(lower) + f(upper);
 for(i=1; i<= subInterval-1; i++)
 {
  k = lower + i*stepSize;
  integration = integration + 2 * f(k);
 }
 integration = integration * stepSize/2;
 printf("\nRequired value of integration is: %.3f", integration);

 return 0;
}
------------------------------------------simpson 1/3 runle---------------------------

#include<stdio.h>

#include<math.h>

/* Define function here */
#define f(x) 1/(1+x*x)

int main()
{
 float lower, upper, integration=0.0, stepSize, k;
 int i, subInterval;

 /* Input */
 printf("Enter lower limit of integration: ");
 scanf("%f", &lower);
 printf("Enter upper limit of integration: ");
 scanf("%f", &upper);
 printf("Enter number of sub intervals: ");
 scanf("%d", &subInterval);

 /* Calculation */
 /* Finding step size */
 stepSize = (upper - lower)/subInterval;

 /* Finding Integration Value */
 integration = f(lower) + f(upper);
 for(i=1; i<= subInterval-1; i++)
 {
  k = lower + i*stepSize;
  if(i%2==0)
  {
   integration = integration + 2 * f(k);
  }
  else
  {
   integration = integration + 4 * f(k);
  }
 }
 integration = integration * stepSize/3;
 printf("\nRequired value of integration is: %.3f", integration);

 return 0;
}

------------------------------------------gaus jacobi itteration-----------------------

#include<stdio.h>
#include<math.h>
#define f1(x,y,z)  (17-y+2*z)/20
#define f2(x,y,z)  (-18-3*x+z)/20
#define f3(x,y,z)  (25-2*x+3*y)/20

/* Main function */
int main()
{
 float x0=0, y0=0, z0=0, x1, y1, z1, e1, e2, e3, e;
 int count=1;

 printf("Enter tolerable error:\n");
 scanf("%f", &e);

 printf("\nCount\tx\ty\tz\n");
 do
 {
  /* Calculation */
  x1 = f1(x0,y0,z0);
  y1 = f2(x0,y0,z0);
  z1 = f3(x0,y0,z0);
  printf("%d\t%0.4f\t%0.4f\t%0.4f\n",count, x1,y1,z1);

  /* Error */
  e1 = fabs(x0-x1);
  e2 = fabs(y0-y1);
  e3 = fabs(z0-z1);

  count++;

  /* Set value for next iteration */
  x0 = x1;
  y0 = y1;
  z0 = z1;
 }while(e1>e && e2>e && e3>e);

 printf("\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n",x1,y1,z1);


 return 0;
}
------------------------------------------gaus sideal iteration------------------------

#include<stdio.h>
#include<math.h>
#define f1(x,y,z)  (17-y+2*z)/20
#define f2(x,y,z)  (-18-3*x+z)/20
#define f3(x,y,z)  (25-2*x+3*y)/20

/* Main function */
int main()
{
 float x0=0, y0=0, z0=0, x1, y1, z1, e1, e2, e3, e;
 int count=1;
 printf("Enter tolerable error:\n");
 scanf("%f", &e);

 printf("\nCount\tx\ty\tz\n");
 do
 {
  /* Calculation */
  x1 = f1(x0,y0,z0);
  y1 = f2(x1,y0,z0);
  z1 = f3(x1,y1,z0);
  printf("%d\t%0.4f\t%0.4f\t%0.4f\n",count, x1,y1,z1);

  /* Error */
  e1 = fabs(x0-x1);
  e2 = fabs(y0-y1);
  e3 = fabs(z0-z1);

  count++;

  /* Set value for next iteration */
  x0 = x1;
  y0 = y1;
  z0 = z1;

 }while(e1>e && e2>e && e3>e);

 printf("\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n",x1,y1,z1);

 return 0;
}



