-------------------------------------bisection---------------------

#include<stdio.h>
#include<math.h>
#define f(x) cos(x) - x * exp(x)

int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1;

	 /* Inputs */
	 up:
	 printf("\nEnter two initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 /* Calculating Functional Value */
	 f0 = f(x0);
	 f1 = f(x1);
	 /* Checking whether given guesses brackets the root or not. */
	 if( f0 * f1 > 0.0)
	 {
		  printf("Incorrect Initial Guesses.\n");
		  goto up;
	 }
   /* Implementing Bisection Method */
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
	 do
	 {
		  x2 = (x0 + x1)/2;
		  f2 = f(x2);
		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step, x0, x1, x2, f2);
		
		  if( f0 * f2 < 0)
		  {
			   x1 = x2;
			   f1 = f2;
		  }
		  else
		  {
			   x0 = x2;
			   f0 = f2;
		  }
		  step = step + 1;
	 }while(fabs(f2)>e);
	 printf("\nRoot is: %f", x2);
    return 0;
}


-------------------------------------secant------------------------

#include<stdio.h>
#include<math.h>
#include<stdlib.h>

#define f(x) x*x*x - 2*x - 5

int main()
{
	 float x0, x1, x2, f0, f1, f2, e;
	 int step = 1, N;

	 /* Inputs */
	 printf("\nEnter initial guesses:\n");
	 scanf("%f%f", &x0, &x1);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 printf("Enter maximum iteration:\n");
	 scanf("%d", &N);
	
	 /* Implementing Secant Method */
	 printf("\nStep\t\tx0\t\tx1\t\tx2\t\tf(x2)\n");
	 do
	 {
		  f0 = f(x0);
		  f1 = f(x1);
		  if(f0 == f1)
		  {
			   printf("Mathematical Error.");
			   exit(0);
		  }
		  
		  x2 = x1 - (x1 - x0) * f1/(f1-f0);
		  f2 = f(x2);
		  
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step,x0,x1,x2, f2);
		  
		  x0 = x1;
		  f0 = f1;
		  x1 = x2;
		  f1 = f2;
		  
		  step = step + 1;
		  
		  if(step > N)
		  {
			   printf("Not Convergent.");
			   exit(0);
		  }
	 }while(fabs(f2)>e);
	
	 printf("\nRoot is: %f", x2);
return 0 ;
}
-------------------------------------lagrange----------------------

#include<stdio.h>
int main()
{
	 float x[100], y[100], xp, yp=0, p;
	 int i,j,n;
	 /* Input Section */
	 printf("Enter number of data: ");
	 scanf("%d", &n);
	 printf("Enter data:\n");
	 for(i=1;i<=n;i++)
	 {
		  printf("x[%d] = ", i);
		  scanf("%f", &x[i]);
		  printf("y[%d] = ", i);
		  scanf("%f", &y[i]);
	 }
	 printf("Enter interpolation point: ");
	 scanf("%f", &xp);
	 /* Implementing Lagrange Interpolation */
	 for(i=1;i<=n;i++)
	 {
		  p=1;
		  for(j=1;j<=n;j++)
		  {
			   if(i!=j)
			   {
			    	p = p* (xp - x[j])/(x[i] - x[j]);
			   }
		  }
		  yp = yp + p * y[i];
	 }
	 printf("Interpolated value at %.3f is %.3f.", xp, yp);
return 0;
}



-------------------------------------Newton dividend---------------

#include<stdio.h>


int main()
{
    int x[10], y[10], p[10];
    int k,f,n,i,j=1,f1=1,f2=0;
    printf("\nEnter the number of observations:\n");
    scanf("%d", &n);

    printf("\nEnter the different values of x:\n");
    for (i=1;i<=n;i++)
        scanf("%d", &x[i]);

    printf("\nThe corresponding values of y are:\n");
    for (i=1;i<=n;i++)
        scanf("%d", &y[i]);

    f=y[1];
    printf("\nEnter the value of 'k' in f(k) you want to evaluate:\n");
    scanf("%d", &k);

    do
    {
        for (i=1;i<=n-1;i++)
        {
            p[i] = ((y[i+1]-y[i])/(x[i+j]-x[i]));
            y[i]=p[i];
        }
        f1=1;
        for(i=1;i<=j;i++)
            {
                f1*=(k-x[i]);
            }
        f2+=(y[1]*f1);
        n--;
        j++;
    }

    while(n!=1);
    f+=f2;
    printf("\nf(%d) = %d", k , f);
    return 0;
}

-------------------------------------Newton Rapson-----------------

#include<stdio.h>

#include<math.h>
#include<stdlib.h>

#define    f(x)    3*x - cos(x) -1

#define   g(x)   3 + sin(x)

int main()
{
	 float x0, x1, f0, f1, g0, e;
	 int step = 1, N;

     /* Inputs */
	 printf("\nEnter initial guess:\n");
	 scanf("%f", &x0);
	 printf("Enter tolerable error:\n");
	 scanf("%f", &e);
	 printf("Enter maximum iteration:\n");
	 scanf("%d", &N);
	 /* Implementing Newton Raphson Method */
	 printf("\nStep\t\tx0\t\tf(x0)\t\tx1\t\tf(x1)\n");
	 do
	 {
		  g0 = g(x0);
		  f0 = f(x0);
		  if(g0 == 0.0)
		  {
			   printf("Mathematical Error.");
			   exit(0);
		  }

		
		  x1 = x0 - f0/g0;

		
		  printf("%d\t\t%f\t%f\t%f\t%f\n",step,x0,f0,x1,f1);
		  x0 = x1;
		  
		  step = step+1;
		
		  if(step > N)
		  {
			   printf("Not Convergent.");
			   exit(0);
		  }
		  
		  f1 = f(x1);
		  
	 }while(fabs(f1)>e);
	
	 printf("\nRoot is: %f", x1);
	 return 0;
}

------------------------------Newton forward table and approximation------------------
#include <stdio.h>
#include <math.h>

int fact(int);

void main() {
    float arr[10][11], x, h, p, y, px = 1;
    int i, j, n, ch = 30;

    printf("\nEnter the number of data:");
    scanf("%d", &n);

    printf("\nEnter the data");
    for (i = 0; i < n; i++) {
        printf("X%d=", i + 1);
        scanf("%f", &arr[i][0]);
        printf("Y%d=", i + 1);
        scanf("%f", &arr[i][1]);
    }

    // Forming difference table.
    for (j = 2; j <= n; j++)
        for (i = 0; i < n - 1; i++)
            arr[i][j] = arr[i + 1][j - 1] - arr[i][j - 1];

    // Printing table.
    printf("\nDifference table is:-");
    printf("\n\tx\tY");
    for (i = 0; i <= n - 2; i++)
        printf("\t%c^%dY", ch, i + 1);
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n + 1 - i; j++) {
            printf("\t%.4f", arr[i][j]);
        }
    }

    // Take the value of x for f(x).
    printf("\nEnter the value x for function f(x):");
    scanf("%f", &x);

    // Calculate the value of f(x) for x.
    h = arr[1][0] - arr[0][0];
    p = (x - arr[0][0]) / h;
    y = arr[0][1];

    for (i = 1; i < n; i++) {
        px = px * (p - (i - 1));
        y = y + (arr[0][i + 1] * px) / fact(i);
    }

    printf("\nThe value of function at x=%f is %f", x, y);
}

int fact(int n) {
    int i, f = 1;
    for (i = 1; i <= n; i++)
        f = f * i;
    return f;
}



-----------------------------Newton backwards table and approximation----------

#include <stdio.h>
#include <math.h>

int fact(int);

void main() {
    float arr[10][11], x, h, p, y, px = 1;
    int i, j, n, ch = 30;

    printf("\nEnter the number of data:");
    scanf("%d", &n);

    printf("\nEnter the data");
    for (i = 0; i < n; i++) {
        printf("X%d=", i + 1);
        scanf("%f", &arr[i][0]);
        printf("Y%d=", i + 1);
        scanf("%f", &arr[i][1]);
    }

    // Forming difference table (backward differences).
    for (j = 2; j <= n; j++)
        for (i = n - 1; i >= j - 1; i--)
            arr[i][j] = arr[i][j - 1] - arr[i - 1][j - 1];

    // Printing table.
    printf("\nDifference table is:-");
    printf("\n\tx\tY");
    for (i = 0; i <= n - 2; i++)
        printf("\t%c^%dY", ch, i + 1);
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n + 1 - i; j++) {
            printf("\t%.4f", arr[i][j]);
        }
    }

    // Take the value of x for f(x).
    printf("\nEnter the value x for function f(x):");
    scanf("%f", &x);

    // Calculate the value of f(x) for x.
    h = arr[1][0] - arr[0][0];
    p = (x - arr[n - 1][0]) / h;
    y = arr[n - 1][1];

    for (i = 1; i < n; i++) {
        px = px * (p + (i - 1));
        y = y + (arr[n - 1][i + 1] * px) / fact(i);
    }

    printf("\nThe value of function at x=%f is %f", x, y);
}

int fact(int n) {
    int i, f = 1;
    for (i = 1; i <= n; i++)
        f = f * i;
    return f;
}


-----------------------------least sqare method -------------------------------
#include<stdio.h>
#define S 50

int main()
{
 int n, i;
 float x[S], y[S], sumX=0, sumX2=0, sumY=0, sumXY=0, a, b;

 /* Input */
 printf("How many data points?\n");
 scanf("%d", &n);
 printf("Enter data:\n");
 for(i=1;i<=n;i++)
 {
  printf("x[%d]=",i);
  scanf("%f", &x[i]);
  printf("y[%d]=",i);
  scanf("%f", &y[i]);
 }
 /* Calculating Required Sum */
 for(i=1;i<=n;i++)
 {
  sumX = sumX + x[i];
  sumX2 = sumX2 + x[i]*x[i];
  sumY = sumY + y[i];
  sumXY = sumXY + x[i]*y[i];
 }
 /* Calculating a and b */
 b = (n*sumXY-sumX*sumY)/(n*sumX2-sumX*sumX);
 a = (sumY - b*sumX)/n;
 /* Displaying value of a and b */
 printf("Values are: a=%0.2f and b = %0.2f",a,b);
 printf("\nEquation of best fit is: y = %0.2f + %0.2fx",a,b);

 return(0);
}


------------------------------------------trapezoidal rule n=5------------------------
#include<stdio.h>

#include<math.h>

/* Define function here */
#define f(x) 1/(1+pow(x,2))

int main()
{
 float lower, upper, integration=0.0, stepSize, k;
 int i, subInterval;
 
 /* Input */
 printf("Enter lower limit of integration: ");
 scanf("%f", &lower);
 printf("Enter upper limit of integration: ");
 scanf("%f", &upper);
 printf("Enter number of sub intervals: ");
 scanf("%d", &subInterval);

 /* Calculation */
 /* Finding step size */
 stepSize = (upper - lower)/subInterval;

 /* Finding Integration Value */
 integration = f(lower) + f(upper);
 for(i=1; i<= subInterval-1; i++)
 {
  k = lower + i*stepSize;
  integration = integration + 2 * f(k);
 }
 integration = integration * stepSize/2;
 printf("\nRequired value of integration is: %.3f", integration);

 return 0;
}
------------------------------------------simpson 1/3 runle---------------------------

#include<stdio.h>

#include<math.h>

/* Define function here */
#define f(x) 1/(1+x*x)

int main()
{
 float lower, upper, integration=0.0, stepSize, k;
 int i, subInterval;

 /* Input */
 printf("Enter lower limit of integration: ");
 scanf("%f", &lower);
 printf("Enter upper limit of integration: ");
 scanf("%f", &upper);
 printf("Enter number of sub intervals: ");
 scanf("%d", &subInterval);

 /* Calculation */
 /* Finding step size */
 stepSize = (upper - lower)/subInterval;

 /* Finding Integration Value */
 integration = f(lower) + f(upper);
 for(i=1; i<= subInterval-1; i++)
 {
  k = lower + i*stepSize;
  if(i%2==0)
  {
   integration = integration + 2 * f(k);
  }
  else
  {
   integration = integration + 4 * f(k);
  }
 }
 integration = integration * stepSize/3;
 printf("\nRequired value of integration is: %.3f", integration);

 return 0;
}

------------------------------------------gaus jacobi itteration-----------------------

#include<stdio.h>
#include<math.h>
#define f1(x,y,z)  (17-y+2*z)/20
#define f2(x,y,z)  (-18-3*x+z)/20
#define f3(x,y,z)  (25-2*x+3*y)/20

/* Main function */
int main()
{
 float x0=0, y0=0, z0=0, x1, y1, z1, e1, e2, e3, e;
 int count=1;

 printf("Enter tolerable error:\n");
 scanf("%f", &e);

 printf("\nCount\tx\ty\tz\n");
 do
 {
  /* Calculation */
  x1 = f1(x0,y0,z0);
  y1 = f2(x0,y0,z0);
  z1 = f3(x0,y0,z0);
  printf("%d\t%0.4f\t%0.4f\t%0.4f\n",count, x1,y1,z1);

  /* Error */
  e1 = fabs(x0-x1);
  e2 = fabs(y0-y1);
  e3 = fabs(z0-z1);

  count++;

  /* Set value for next iteration */
  x0 = x1;
  y0 = y1;
  z0 = z1;
 }while(e1>e && e2>e && e3>e);

 printf("\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n",x1,y1,z1);


 return 0;
}
------------------------------------------gaus sideal iteration------------------------

#include<stdio.h>
#include<math.h>
#define f1(x,y,z)  (17-y+2*z)/20
#define f2(x,y,z)  (-18-3*x+z)/20
#define f3(x,y,z)  (25-2*x+3*y)/20

/* Main function */
int main()
{
 float x0=0, y0=0, z0=0, x1, y1, z1, e1, e2, e3, e;
 int count=1;
 printf("Enter tolerable error:\n");
 scanf("%f", &e);

 printf("\nCount\tx\ty\tz\n");
 do
 {
  /* Calculation */
  x1 = f1(x0,y0,z0);
  y1 = f2(x1,y0,z0);
  z1 = f3(x1,y1,z0);
  printf("%d\t%0.4f\t%0.4f\t%0.4f\n",count, x1,y1,z1);

  /* Error */
  e1 = fabs(x0-x1);
  e2 = fabs(y0-y1);
  e3 = fabs(z0-z1);

  count++;

  /* Set value for next iteration */
  x0 = x1;
  y0 = y1;
  z0 = z1;

 }while(e1>e && e2>e && e3>e);

 printf("\nSolution: x=%0.3f, y=%0.3f and z = %0.3f\n",x1,y1,z1);

 return 0;
}

-------------------------Theory---------------------------


###################Bisection Method Algorithm##############
Follow the below procedure to get the solution for the continuous function:

For any continuous function f(x),

Find two points, say a and b such that a < b and f(a)* f(b) < 0
Find the midpoint of a and b, say “t”
t is the root of the given function if f(t) = 0; else follow the next step
Divide the interval [a, b] – If f(t)*f(a) <0, there exist a root between t and a
– else if f(t) *f (b) < 0, there exist a root between t and b
Repeat above three steps until f(t) = 0.
The bisection method is an approximation method to find the roots of the given equation by repeatedly dividing the interval. This method will divide the interval until the resulting interval is found, which is extremely small.


####################secant##########################
The secant method is a root-finding procedure in numerical analysis that uses a series of roots of secant lines to better approximate a root of a function 

Secant Method Steps
The secant method procedures are given below using equation (1).

Step 1: Initialization

x0 and x1 of α are taken as initial guesses.

Step 2: Iteration

In the case of n = 1, 2, 3, …,
Xn+1 = Xn - f(Xn).(Xn -Xn-1)/(F(Xn) - F(Xn-1))
until a specific criterion for termination has been met (i.e., The desired accuracy of the answer or the maximum number of iterations has been attained).

##################### Newton Dividend #########################
Interpolation is an estimation of a value within two known values in a sequence of values. Newton’s divided difference interpolation formula is an interpolation technique used when the interval difference is not same for all sequence of values. Suppose f(x0), f(x1), f(x2)………f(xn) be the (n+1) values of the function y=f(x) corresponding to the arguments x=x0, x1, x2…xn, where interval differences are not same Then the first divided difference is given by
f[Xo,X1] = (F(X1) -F(Xo))/(X1-Xo)


###################### Newton Rapson ##########################
The Newton Raphson Method is referred to as one of the most commonly used techniques for finding the roots of given equations. It can be efficiently generalised to find solutions to a system of equations

Newton Raphson Method Formula
Let x0 be the approximate root of f(x) = 0 and let x1 = x0 + h be the correct root. Then f(x1) = 0

⇒ f(x0 + h) = 0….(1)

By expanding the above equation using Taylor’s theorem, we get:

f(x0) + hf1(x0) + … = 0

⇒ h = -f(x0) /f’(x0)

Therefore, x1 = x0 – f(x0)/ f’(x0)

Now, x1 is the better approximation than x0.

Similarly, the successive approximations x2, x3, …., xn+1 are given by
Xn+1 = Xn - f(Xn)/f'(Xn)
 
 
This is called Newton Raphson formula.

############################################# Newton forward and backward ###############

Interpolation is the technique of estimating the value of a function for any intermediate value of the independent variable, while the process of computing the value of the function outside the given range is called extrapolation.


Forward Differences: The differences y1 – y0, y2 – y1, y3 – y2, ……, yn – yn–1 when denoted by dy0, dy1, dy2, ……, dyn–1 are respectively, called the first forward differences. Thus, the first forward differences are : 
del Yr = Yr+1 - Yr

interpolation formula
f(a+hu) = f(a) + u del f(a) + u(u+1)/2! del^2 f(a) +.........
where u = ( x – a ) / h


############################################ LEAST SQuare Method###########################
The least square method is the process of finding the best-fitting curve or line of best fit for a set of data points by reducing the sum of the squares of the offsets (residual part) of the points from the curve. During the process of finding the relation between two variables, the trend of outcomes are estimated quantitatively. This process is termed as regression analysis. The method of curve fitting is an approach to regression analysis. This method of fitting equations which approximates the curves to given raw data is the least squares.

Suppose when we have to determine the equation of line of best fit for the given data, then we first use the following formula.

The equation of least square line is given by Y = a + bX

Normal equation for ‘a’: 

∑Y = na + b∑X

Normal equation for ‘b’: 

∑XY = a∑X + b∑X2

Solving these two normal equations we can get the required trend line equation.

Thus, we can get the line of best fit with formula y = ax + b



################################################### trapezidal ######################################################
Trapezoidal Rule is a rule that evaluates the area under the curves by dividing the total area into smaller trapezoids rather than using rectangles. This integration works by approximating the region under the graph of a function as a trapezoid, and it calculates the area. This rule takes the average of the left and the right sum.

Trapezoidal Rule Formula
Let f(x) be a continuous function on the interval [a, b]. Now divide the intervals [a, b] into n equal subintervals with each of width,

Δx = (b-a)/n, Such that a = x0 < x1< x2< x3<…..<xn = b

Then the Trapezoidal Rule formula for area approximating the definite integral ∫ab f(x)dx is given by:

 [b ,a]S f(x)dx or Tn = del X /2 [f(Xo) + 2f(x1) + 2f(x2) +....+F(Xn)]
 

Where, xi = a+iΔx

If n →∞, R.H.S of the expression approaches the definite integral ∫ab f(x)dx.
####################################################simpson 1/3 #####################################################
Simpson’s rule is one of the numerical methods which is used to evaluate the definite integral. Usually, to find the definite integral, we use the fundamental theorem of calculus, where we have to apply the antiderivative techniques of integration.

Simpson’s 1/3rd rule is an extension of the trapezoidal rule in which the integrand is approximated by a second-order polynomial. Simpson rule can be derived from the various way using Newton’s divided difference polynomial,  Lagrange polynomial and the method of coefficients. Simpson’s 1/3 rule is defined by:
∫ab f(x) dx = h/3 [(y0 + yn) + 4(y1 + y3 + y5 + …. + yn-1) + 2(y2 + y4 + y6 + ….. + yn-2)]


################################################### gaus jacobi and sideal #####################################################

Iterative methods Jacobi and Gauss-Seidel in numerical analysis are based on the idea of successive approximations. This iterative method begins with one or two initial approximations of the roots, with a sequence of approximations x1, x2, x3, …, xk, …, as k → ∞, this sequence of roots converges to exact root 𝛼. For a system of equations Ax = B, we begin with an initial approximation of solution vector x = xo, by which we get a sequence of solution vector x1, x2, …, xk, … as k → ∞, this sequence converges to the solution x = A– 1B.

The general iterative formulas can be given as:

x k + 1 = Hxk ; k = 1, 2, 3, …

Where xk + 1 and xk are approximations for the exact root of Ax = B at (k + 1)th and kth iterations. H is an iteration matrix that depends on A and B.


-----------------------------------jacobi-------------------------
To find the solution to this system of equations Ax = B, we assume that the system of equations have a unique solution and there is no zero entry among the diagonal or pivot elements of the coefficient matrix A.

Now, we shall begin to solve equation 1 for x1, equation 2 for x2 and so on equation n for xn, we get

x1 = 1/a11 [b1 – a12x2 – a13x3 – … – a1nxn]

x2 = 1/a22 [b2 – a21x1 – a23x3 – … – a2nxn]

⠇

xn = 1/ann [bn – an1x1 – an3x3 – … – an n – 1xn – 1]

By making an initial guess for the solution x(0) = (x1(0), x2(0), …, xn(0)) and substituting these values only to the right hand side of the above equations we get first approximations x(1) = (x1(1), x2(1), …, xn(1)). Continuing this process iteratively we get sequence of approximations {x(k)} such that as k → ∞, this sequence converges to exact solution of the system of equation up to a given error tolerance.
-----------------------------------sideal-----------------------------------
In Jacobi method the value of the variables is not modified until next iteration, whereas in Gauss-Seidel method the value of the variables are modified as soon as new value is evaluated. For instance, in Jacobi method the value of xi(k) is not modified until the (k + 1)th iteration but in Gauss-Seidel method the value of xi(k) changes in in kth iteration only.
